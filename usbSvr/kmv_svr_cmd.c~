#include "kmv_svr_cmd.h"
#include "sys.h"
#include "tsk.h"
#include "ext.h"

/************************************************************

int KMV_SVR_CMD_Ask(SVR_HEAD_E *pHead,unsigned char *pBuf);

*************************************************************/
int KMV_SVR_CMD_Ask(SVR_HEAD_E *pHead,unsigned char *pBuf,char ret)
{
	pHead->dataNum = 3;
	pBuf[1] = pBuf[0];
	pBuf[0] = 0x02;
	pBuf[2] = ret;
		
	return SVR_OK;
}


/************************************************************

int KMV_SVR_CMD_Reset(SVR_HEAD_E *pHead,unsigned char *pBuf);

*************************************************************/
int KMV_SVR_CMD_Reset(SVR_HEAD_E *pHead,unsigned char *pBuf)
{
	int ret=0;
	KMV_SVR_printf("svr cmd reset\n");
	//WV_CMD_GetReset(); 
	KMV_SVR_CMD_Ask(pHead,pBuf,ret);
	
	return ret;
}


/************************************************************

int KMV_SVR_CMD_Handel(SVR_HEAD_E *pHead,unsigned char *pBuf);

*************************************************************/
int KMV_SVR_CMD_Handel(SVR_HEAD_E *pHead,unsigned char *pBuf)
{
	int ret = 0;
	KMV_SVR_printf("svr cmd handle\n");
	
	KMV_SVR_CMD_Ask(pHead,pBuf,ret);
	
	return SVR_OK;
}
/************************************************************

int KMV_SVR_CMD_SetLocalIp(SVR_HEAD_E *pHead,unsigned char *pBuf);

*************************************************************/
int KMV_SVR_CMD_SetLocalIp(SVR_HEAD_E *pHead,unsigned char *pBuf)
{
	int ret = 0;
	WV_S8 buf[30];
	KMV_SVR_printf("svr cmd set local IP\n");
    sprintf(buf,"%d.%d.%d.%d",pBuf[1],pBuf[2],pBuf[3],pBuf[4]); 
    SYS_IP_SetIp(buf);
    sprintf(buf,"%d.%d.%d.%d",pBuf[5],pBuf[6],pBuf[7],pBuf[8]); 
    SYS_IP_SetMask(buf);
    sprintf(buf,"%d.%d.%d.%d",pBuf[9],pBuf[10],pBuf[11],pBuf[12]); 
    SYS_IP_SetGw(buf); 
    SYS_IP_SaveConf();
	KMV_SVR_CMD_Ask(pHead,pBuf,ret);
	return SVR_OK;
}

/************************************************************

int KMV_SVR_CMD_SetLocalAddr(SVR_HEAD_E *pHead,unsigned char *pBuf);

*************************************************************/
int KMV_SVR_CMD_SetLocalAddr(SVR_HEAD_E *pHead,unsigned char *pBuf)
{
	int ret = 0;
	KMV_SVR_printf("svr cmd set local address\n");
	char  buf[30];
	WV_U16 port;
	sprintf(buf,"%d.%d.%d.%d",pBuf[1],pBuf[2],pBuf[3],pBuf[4]); 
    port = *((WV_U16*)(pBuf+5));	
    TSK_VENC_SetSendIp(0, buf,port);
    TSK_VENC_SetSendIp(1, buf,port);
    
    TSK_AI_SetSendIp(0, buf,port);
    TSK_AI_SetSendIp(1, buf,port);
    
	KMV_SVR_CMD_Ask(pHead,pBuf,ret);
	return SVR_OK;
}
/************************************************************

int KMV_SVR_CMD_SetRemoteAddr(SVR_HEAD_E *pHead,unsigned char *pBuf);

*************************************************************/
int KMV_SVR_CMD_SetRemoteAddr(SVR_HEAD_E *pHead,unsigned char *pBuf)
{
	//pHead->dataNum = 1;
	int ret = 0;
	KMV_SVR_printf("svr cmd set remote address\n");
    char  buf[30];
	WV_U16 port;
	sprintf(buf,"%d.%d.%d.%d",pBuf[1],pBuf[2],pBuf[3],pBuf[4]); 
    port = *((WV_U16*)(pBuf+5));	
    TSK_SRX_SetRxIp(0,buf,port);
	KMV_SVR_CMD_Ask(pHead,pBuf,ret);
	return SVR_OK;
}

/************************************************************

int KMV_SVR_CMD_SetUartPort1(SVR_HEAD_E *pHead,unsigned char *pBuf);

*************************************************************/
int KMV_SVR_CMD_SetUartPort1(SVR_HEAD_E *pHead,unsigned char *pBuf)
{
	int ret = 0;
	KMV_SVR_printf("svr cmd set uart port 1");

	KMV_SVR_CMD_Ask(pHead,pBuf,ret);
	return SVR_OK;
}

/************************************************************

int KMV_SVR_CMD_SetUartPort2(SVR_HEAD_E *pHead,unsigned char *pBuf);

*************************************************************/
int KMV_SVR_CMD_SetUartPort2(SVR_HEAD_E *pHead,unsigned char *pBuf)
{
	int ret = 0;
	KMV_SVR_printf("svr cmd set uart port 2");

	KMV_SVR_CMD_Ask(pHead,pBuf,ret);
	return SVR_OK;
}

/************************************************************

int KMV_SVR_CMD_SetUartPort3(SVR_HEAD_E *pHead,unsigned char *pBuf);

*************************************************************/
int KMV_SVR_CMD_SetUartPort3(SVR_HEAD_E *pHead,unsigned char *pBuf)
{
	int ret = 0;
	KMV_SVR_printf("svr cmd set uart port 3");

	KMV_SVR_CMD_Ask(pHead,pBuf,ret);
	return SVR_OK;
}


/************************************************************

int KMV_SVR_CMD_SetUartPort4(SVR_HEAD_E *pHead,unsigned char *pBuf);

*************************************************************/
int KMV_SVR_CMD_SetUartPort4(SVR_HEAD_E *pHead,unsigned char *pBuf)
{
	int ret = 0;
	KMV_SVR_printf("svr cmd set uart port 4");

	KMV_SVR_CMD_Ask(pHead,pBuf,ret);
	return SVR_OK;
}

/************************************************************

int KMV_SVR_CMD_ChangeVGA(SVR_HEAD_E *pHead,unsigned char *pBuf);

*************************************************************/
int KMV_SVR_CMD_ChangeVGA(SVR_HEAD_E *pHead,unsigned char *pBuf)
{
	int ret = 0;
	KMV_SVR_printf("svr cmd change VGA ");
	
       EXT_VGA_SetSw(pBuf[2],pBuf[1],pBuf[3]);
	KMV_SVR_CMD_Ask(pHead,pBuf,ret);
	return SVR_OK;
}

/************************************************************

int KMV_SVR_CMD_ChangeDVI(SVR_HEAD_E *pHead,unsigned char *pBuf);

*************************************************************/
int KMV_SVR_CMD_ChangeDVI(SVR_HEAD_E *pHead,unsigned char *pBuf)
{
	int ret = 0;
	KMV_SVR_printf("svr cmd change DVI ");
    EXT_DVI_SetSw(pBuf[2],pBuf[1],pBuf[3]);
	KMV_SVR_CMD_Ask(pHead,pBuf,ret);
	return SVR_OK;
}

/************************************************************

int KMV_SVR_CMD_ChangeLINE(SVR_HEAD_E *pHead,unsigned char *pBuf);

*************************************************************/
int KMV_SVR_CMD_ChangeLine(SVR_HEAD_E *pHead,unsigned char *pBuf)
{
	int ret = 0;
	KMV_SVR_printf("svr cmd change Line ");
     EXT_3268_SetMux(pBuf[1] ,pBuf[3]);
	KMV_SVR_CMD_Ask(pHead,pBuf,ret);
	return SVR_OK;
}

/************************************************************

int KMV_SVR_CMD_ChangeMic(SVR_HEAD_E *pHead,unsigned char *pBuf);

*************************************************************/
int KMV_SVR_CMD_ChangeMic(SVR_HEAD_E *pHead,unsigned char *pBuf)
{
	int ret = 0;
	KMV_SVR_printf("svr cmd change Mic ");
      EXT_3268_SetMic(pBuf[1] ,pBuf[3]);
	KMV_SVR_CMD_Ask(pHead,pBuf,ret);
	return SVR_OK;
}

/************************************************************

int KMV_SVR_CMD_ChangeMic(SVR_HEAD_E *pHead,unsigned char *pBuf);

*************************************************************/
int KMV_SVR_CMD_ChangeMouse(SVR_HEAD_E *pHead,unsigned char *pBuf)
{
	int ret = 0;
	KMV_SVR_printf("svr cmd change Mouse ");

	KMV_SVR_CMD_Ask(pHead,pBuf,ret);
	return SVR_OK;
}

/************************************************************

int KMV_SVR_CMD_ChangeMIC(SVR_HEAD_E *pHead,unsigned char *pBuf);

*************************************************************/
int KMV_SVR_CMD_SearchInfo(SVR_HEAD_E *pHead,unsigned char *pBuf)
{
	int ret = 0;
	KMV_SVR_printf("svr cmd search info ");

	KMV_SVR_CMD_Ask(pHead,pBuf,ret);
	return SVR_OK;
}


/************************************************************

int KMV_SVR_CMD_Proc(SVR_HEAD_E *pHead,unsigned char *pBuf);

*************************************************************/
int KMV_SVR_CMD_Proc(SVR_HEAD_E *pHead,unsigned char *pBuf)
{
	unsigned char data;
	data = pBuf[0];
	int ret = 0;
	switch(data){
		case KMV_SVR_CMD_RESET :
			//reset 
			ret = KMV_SVR_CMD_Reset(pHead,pBuf);
			break;

		case KMV_SVR_CMD_ASK :
			//svr ask		
			KMV_SVR_CMD_Ask(pHead,pBuf,ret);
			break;

		case KMV_SVR_CMD_HANDLE:
			//handle test 
			ret = KMV_SVR_CMD_Handel(pHead,pBuf);		
			break;

		case KMV_SVR_CMD_SET_LOCAL_IP:
			//set local machine IP address
			ret = KMV_SVR_CMD_SetLocalIp(pHead,pBuf);
			//KMV_SVR_CMD_Ask(pHead,pBuf,ret);
			break;

		case KMV_SVR_CMD_SET_LOCAL_ADDR:
			//set local send address
			KMV_SVR_CMD_SetLocalAddr(pHead,pBuf);
			break;

		case KMV_SVR_CMD_SET_REMOTE_ADDR:
			//set remote recv address
			KMV_SVR_CMD_SetRemoteAddr(pHead,pBuf);
			break;

		case KMV_SVR_CMD_UART_PORT1:
			//set uart port 1
			KMV_SVR_CMD_SetUartPort1(pHead,pBuf);
			break;

		case KMV_SVR_CMD_UART_PORT2:
			//set uart port 2
			KMV_SVR_CMD_SetUartPort2(pHead,pBuf);
			break;

		case KMV_SVR_CMD_UART_PORT3:
			//set uart port 3
			KMV_SVR_CMD_SetUartPort3(pHead,pBuf);
			break;

		case KMV_SVR_CMD_UART_PORT4:
			//set uart port 4
			KMV_SVR_CMD_SetUartPort4(pHead,pBuf);
			break;

		case KMV_SVR_CMD_VGA_CHANGE:
			//change VGA
			KMV_SVR_CMD_ChangeVGA(pHead,pBuf);
			break;

		case KMV_SVR_CMD_DVI_CHANGE:
			//change DVI
			KMV_SVR_CMD_ChangeDVI(pHead,pBuf);
			break;

		case KMV_SVR_CMD_LINE_CHANGE:
			//change Line
			KMV_SVR_CMD_ChangeLine(pHead,pBuf);
			break;

		case KMV_SVR_CMD_MIC_CHANGE:
			//change Mic
			KMV_SVR_CMD_ChangeMic(pHead,pBuf);
			break;

		case KMV_SVR_CMD_MOUSE_CHANGE:
			//change mouse
			KMV_SVR_CMD_ChangeMouse(pHead,pBuf);
			break;

		case KMV_SVR_CMD_SEARCH_INFO:
			//search info
			KMV_SVR_CMD_SearchInfo(pHead,pBuf);
			break;

		default :
			ret = -1;
			KMV_SVR_CMD_Ask(pHead,pBuf,ret);
			break;
		
	}
	return SVR_OK;
}
